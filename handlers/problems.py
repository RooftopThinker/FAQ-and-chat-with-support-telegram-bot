from aiogram import Router, F, types
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramBadRequest
from keyboards.all_keyboards import dispenser_or_humidifier, menu, dispenser_problems, humidifier_problems, cancel
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram_album import AlbumMessage
import sqlalchemy
from data import User, Appeal, Thread
import aiofiles
from .fsm import Problems
from config import ADMINS_CHAT_ID
router = Router()
router.message.filter(F.chat.type == ChatType.PRIVATE)
@router.message(F.text == '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º')
async def problems(message: types.Message, state: FSMContext):
    await message.answer('–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.',
                         reply_markup=dispenser_or_humidifier())
    await state.set_state(Problems.good_chosen)


@router.callback_query(F.data == 'dispenser', Problems.good_chosen)
async def problems_dispenser(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(good='dispenser')
    await callback.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
1. –ü—Ä–æ–±–ª–µ–º–∞: –î–æ–∑–∞—Ç–æ—Ä 174805080 —Å–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç.
2. –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–∑–∞—Ç–æ—Ä/–Ω–µ—Ç –ø–æ–¥–∞—á–∏ –ø–µ–Ω—ã/–±—Ä–∞–∫.
3. –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–Ω—Å–æ—Ä —É –¥–æ–∑–∞—Ç–æ—Ä–∞ 174805080.''', reply_markup=dispenser_problems())
    await state.set_state(Problems.problem_chosen)


@router.callback_query(F.data == 'humidifier', Problems.good_chosen)
async def problems_humidifier(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(good='humidifier')
    await callback.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
1. –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª–∏ 182308427, 221426427.
2. –ü—Ä–æ–±–ª–µ–º–∞: –ò–¥–µ—Ç –ø–∞—Ä –∏–∑ –æ–¥–Ω–æ–π —Ñ–æ—Ä—Å—É–Ω–∫–∏/–Ω–µ –∏–¥–µ—Ç –ø–∞—Ä –≤–æ–≤—Å–µ.
3. –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —Ä–∞–±full_name–æ—Ç–∞—é—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª–∏ 182307898, 182307913.
4. –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç –ø–∞—Ä–∞/—Å–ª–∞–±—ã–π –ø–∞—Ä —É —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—è 174808327.
5. –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—è 182307913 –æ—Å—Ç–∞–µ—Ç—Å—è –ª—É–∂–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏/–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç –Ω–∞ –∫—Ä—ã—à–∫–µ?''', reply_markup=humidifier_problems())
    await state.set_state(Problems.problem_chosen)


@router.callback_query(F.data.startswith('problem'), Problems.problem_chosen)
async def problem_chosen(callback: types.CallbackQuery, state: FSMContext):
    good = await state.get_value('good')
    problem = callback.data.split('_')[1]
    await state.update_data(problem=problem)
    if good == 'humidifier':
        f = await aiofiles.open('static/problems_humidifier.txt', mode='r')
    else:
        f = await aiofiles.open('static/problems_dispenser.txt', mode='r')
    problem = [str(i)+'\n\n–ö –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.' for i in await f.readlines()][int(problem)-1]
    await callback.message.edit_text(text=problem, reply_markup=cancel())
    await state.set_state(Problems.problem_reported)


@router.message(~F.text.in_(('–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–í–æ–ø—Ä–æ—Å—ã', '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º')),Problems.problem_reported,
                F.media_group_id)
async def mediagroup_problem_reported(message: AlbumMessage, state: FSMContext, session: AsyncSession):
    request = sqlalchemy.select(User).filter(User.telegram_id == message.from_user.id)
    user: User = list(await session.scalars(request))[0]
    request = sqlalchemy.select(Thread).filter(Thread.by_user == message.from_user.id, Thread.is_open == True)
    try:
        topic: Thread = list(await session.scalars(request))[0]
    except IndexError:
        topic: types.ForumTopic = await message.bot.create_forum_topic(chat_id=ADMINS_CHAT_ID,
                                                     name=f'‚ùå–û–¢–ö–†–´–¢–ê–Ø –ø—Ä–æ–±–ª–µ–º–∞ {message.from_user.name}')

        session.add(Thread(by_user=message.from_user.id, name=topic.name, message_thread_id=topic.message_thread_id))
        await session.commit()
    try:
        text = message.caption
    except TelegramBadRequest:
        text = ''
    msg_text = ('–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ:'
                f'Username: {user.telegram_username}\n'
                f'–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {user.telegram_name}\n'
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n\n'
                f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {": " + text if text else "–ø—É—Å—Ç–æ"}\n'
                f'–í–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µüîù'
                f'\n'
                f'–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n'
                f'#N{user.telegram_id}'
                )
    media_group = []
    for m in message:
        if m.content_type == 'photo':
            media_group.append(types.InputMediaPhoto(media=m.photo[-1].file_id))
        elif m.content_type == 'video':
            media_group.append(types.InputMediaVideo(media=m.video[-1].file_id))
        else:
            await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ —Ñ–æ—Ç–æ. –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è')
            return

    appeal_media = await message.bot.send_media_group(chat_id=ADMINS_CHAT_ID, media=media_group, message_thread_id=topic.message_thread_id)
    for i in appeal_media:
        new_appeal = Appeal(by_user=message.from_user.id, message_id=i.message_id)
        session.add(new_appeal)
    appeal_message = await message.bot.send_message(chat_id=ADMINS_CHAT_ID, text=msg_text, message_thread_id=topic.message_thread_id)
    request = sqlalchemy.update(User).filter(User.telegram_id == message.from_user.id).values({'problems_appealed': User.problems_appealed+1})
    new_appeal = Appeal(by_user=message.from_user.id, message_id=appeal_message.message_id)
    session.add(new_appeal)
    await session.execute(request)
    await session.commit()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞", reply_markup=menu())
    await state.clear()


@router.message(~F.text.in_(('–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–í–æ–ø—Ä–æ—Å—ã', '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º')),Problems.problem_reported)
async def problem_reported(message: types.Message, state: FSMContext, session: AsyncSession):
    request = sqlalchemy.select(User).filter(User.telegram_id == message.from_user.id)
    user: User = list(await session.scalars(request))[0]
    request = sqlalchemy.select(Thread).filter(Thread.by_user == message.from_user.id, Thread.is_open == True)
    try:
        topic: Thread = list(await session.scalars(request))[0]
    except IndexError:
        topic: types.ForumTopic = await message.bot.create_forum_topic(chat_id=ADMINS_CHAT_ID,
                                                     name=f'‚ùå–û–¢–ö–†–´–¢–ê–Ø –ø—Ä–æ–±–ª–µ–º–∞ {message.from_user.id}')

        session.add(Thread(by_user=message.from_user.id, name=topic.name, message_thread_id=topic.message_thread_id))
        await session.commit()
    msg_text = ('–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ:'
                f'Username: {user.telegram_username}\n'
                f'–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {user.telegram_name}\n'
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n\n'
                f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µüîù'
                f'\n'
                f'–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n'
                f'#N{user.telegram_id}'
                )
    appeal_message = await message.bot.copy_message(chat_id=ADMINS_CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id,
                                                    message_thread_id=topic.message_thread_id)
    appeal_info = await message.bot.send_message(chat_id=ADMINS_CHAT_ID, text=msg_text, message_thread_id=topic.message_thread_id)
    request = sqlalchemy.update(User).filter(User.telegram_id == message.from_user.id).values(
        {'problems_appealed': User.problems_appealed + 1})
    new_appeal = Appeal(by_user=message.from_user.id, message_id=appeal_message.message_id)
    session.add(new_appeal)
    new_appeal = Appeal(by_user=message.from_user.id, message_id=appeal_info.message_id)
    await session.execute(request)
    session.add(new_appeal)
    await session.commit()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞", reply_markup=menu())
    await state.clear()