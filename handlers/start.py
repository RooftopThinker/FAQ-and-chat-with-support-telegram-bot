import sqlalchemy
from aiogram import Router, F, types
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from data import User
from aiogram.fsm.context import FSMContext
from .fsm import RegisterUser
from config import CHANNEL_ID, CHANNEL_INVITE_LINK
from keyboards.all_keyboards import get_phone_number, menu
from typing import Union
router = Router()


@router.message(CommandStart())
async def start_handler(message: Union[types.Message, types.CallbackQuery], state: FSMContext, session: AsyncSession):
    request = sqlalchemy.select(User).filter(User.telegram_id == message.from_user.id)
    result = list(await session.scalars(request))
    message = message if isinstance(message, types.Message) else message.message
    if not result:
        await message.answer(text='''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiseHome! üè°
–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:

üì£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã.
‚ùì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
üõ† –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üòä''', reply_markup=get_phone_number())
        await state.set_state(RegisterUser.fetch_number)
    else:
        await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiseHome! üè°
–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:

üì£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã.
‚ùì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
üõ† –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üòä''', reply_markup=menu())


@router.message(RegisterUser.fetch_number, F.content_type == types.ContentType.CONTACT)
async def register_user(message: types.Message, session: AsyncSession, state: FSMContext):
    username = '@' + message.from_user.username if message.from_user.username else None
    name = message.from_user.full_name
    phone = message.contact.phone_number
    id = message.from_user.id
    new_user = User(telegram_name=name, telegram_username=username, phone=phone, telegram_id=id)
    session.add(new_user)
    await session.commit()
    await message.answer('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await start_handler(message, state, session)


# @router.callback_query(RegisterUser.check_subscription, F.data == 'subscription')
# async def check_sub(callback: types.CallbackQuery, state: FSMContext):
#     user_channel_status = await callback.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)
#
#     if user_channel_status.status == 'left':
#         await callback.message.answer('–ù–µ –≤–∏–¥–∏–º —Ç–µ–±—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')
#         return
#
#     await callback.message.answer('–°–ø–∞—Å–∏–±–æ! –í–∏–¥–∏–º —Ç–µ–±—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∫–∞–Ω–∞–ª–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.',
#                                   reply_markup=types.ReplyKeyboardRemove())
#     await callback.message.delete()
#     await callback.bot.send_chat_action(callback.from_user.id, ChatAction.TYPING)
#     await sleep(5)
#
#     await callback.message.answer_photo(caption='–ù–∞ Wildberries: –û—Ç–∑—ã–≤—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB: ¬´–û—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã¬ª - ¬´–û—Ç–∑—ã–≤—ã¬ª\n'
#                                       '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∞ —Å–∫—Ä–∏–Ω–∞: –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–∑—ã–≤–∞, –≥–¥–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–≤–∞—Ä –∏ —Å–∞–º –æ—Ç–∑—ã–≤.',
#                                         photo=PHOTOS_FILES_IDS[1])
#     await callback.bot.send_chat_action(callback.from_user.id, ChatAction.TYPING)
#     await sleep(5)
#     await callback.message.answer_photo(caption='–ù–∞ Ozon: –û—Ç–∑—ã–≤—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon: ¬´:–ñ–¥—É—Ç –æ—Ç–∑—ã–≤–∞¬ª - ¬´–ú–æ–∏ –æ—Ç–∑—ã–≤—ã¬ª\n'
#                                         '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω, –≥–¥–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–≤–∞—Ä –∏ —Å–∞–º –æ—Ç–∑—ã–≤.',
#                                         photo=PHOTOS_FILES_IDS[0])
#     await callback.bot.send_chat_action(callback.from_user.id, ChatAction.TYPING)
#     await sleep(5)
#     await callback.message.answer('–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ –æ—Ç–∑—ã–≤–∞, –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.'
#                                   ' –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è –æ —Ä–µ—à–µ–Ω–∏–∏.\n')
#     await state.clear()