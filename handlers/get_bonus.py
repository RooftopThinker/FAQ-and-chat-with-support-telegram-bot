import sqlalchemy
from aiogram import Router, F, types
from sqlalchemy.ext.asyncio import AsyncSession
from data import User, Appeal
from aiogram_album import AlbumMessage
from aiogram.fsm.context import FSMContext
from .fsm import GetBonus
from config import ADMINS_CHAT_ID, NEW_TOPIC_ID
from keyboards.all_keyboards import cancel, approve_or_decline_subscription, menu
import json
router = Router()


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å')
async def fetch_review(message: types.Message, state: FSMContext):
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –æ—Ç–∑—ã–≤. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≥–¥–µ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –ø—Ä–æ –±–æ–Ω—É—Å –∏'
                         ' —Å–∫—Ä–∏—à–æ—Ç —Å–∞–º–æ–≥–æ –æ—Ç–∑—ã–≤–∞', reply_markup=cancel())
    await state.set_state(GetBonus.fetch_bank_requisite)


@router.message(F.media_group_id, GetBonus.fetch_bank_requisite)
async def fetch_requisite(message: AlbumMessage, state: FSMContext):
    media_group = []
    for m in message:
        if m.content_type != 'photo':
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã. –î—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.')
            return
        media_group.append({"media":m.photo[-1].file_id, "type": "photo"})
        types.InputMediaPhoto.model_dump_json()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –º–æ–∂–µ–º –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å\n\n'
                         '‚ÄºÔ∏è–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫.\n\n'
                         '–í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∞–Ω–∫–∞, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å.' , reply_markup=cancel())
    await state.set_state(GetBonus.send_for_approval)
    await state.update_data(media_group=media_group)

@router.message(GetBonus.send_for_approval)
async def send_for_approval(message: AlbumMessage, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    request = sqlalchemy.select(User).filter(User.telegram_id == message.from_user.id)

    try:
        result: User = list(await session.scalars(request))[0]
    except IndexError:
        await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        return
    media_group = await message.bot.send_media_group(media=data['media_group'], chat_id=ADMINS_CHAT_ID,
                                                         message_thread_id=NEW_TOPIC_ID)
    text = ('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤!üîù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
            f"Username: {result.telegram_username}\n"
            f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {result.telegram_name}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {result.phone}\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}")
    await message.answer('–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è', reply_markup=await menu(session, message.from_user.id))

    info = await message.bot.send_message(chat_id=ADMINS_CHAT_ID,
                                       reply_markup=approve_or_decline_subscription(message.from_user.id), text=text,
                                       message_thread_id=NEW_TOPIC_ID)
    for i in media_group:
        appeal = Appeal(message_id=i.message_id, by_user=message.from_user.id, is_review=True)
        session.add(appeal)
    appeal = Appeal(message_id=info.message_id, by_user=message.from_user.id, is_review=True)
    session.add(appeal)

    await session.commit()
    await state.clear()

@router.message(GetBonus.fetch_bank_requisite,~F.media_group_id)
async def reject(message: types.Message):
    await message.answer('–ú—ã –æ–∂–∏–¥–∞–µ–º –¥–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')